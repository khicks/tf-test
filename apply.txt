$ terraform apply

Terraform used the selected providers to generate the following execution plan. Resource actions are
indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # module.sandbox_vpc.aws_eip.nat_eip[0] will be created
  + resource "aws_eip" "nat_eip" {
      + allocation_id     = (known after apply)
      + association_id    = (known after apply)
      + customer_owned_ip = (known after apply)
      + domain            = (known after apply)
      + id                = (known after apply)
      + instance          = (known after apply)
      + network_interface = (known after apply)
      + private_dns       = (known after apply)
      + private_ip        = (known after apply)
      + public_dns        = (known after apply)
      + public_ip         = (known after apply)
      + public_ipv4_pool  = (known after apply)
      + tags              = {
          + "Name" = "sandbox_nat_eip"
        }
      + vpc               = true
    }

  # module.sandbox_vpc.aws_eip.nat_eip[1] will be created
  + resource "aws_eip" "nat_eip" {
      + allocation_id     = (known after apply)
      + association_id    = (known after apply)
      + customer_owned_ip = (known after apply)
      + domain            = (known after apply)
      + id                = (known after apply)
      + instance          = (known after apply)
      + network_interface = (known after apply)
      + private_dns       = (known after apply)
      + private_ip        = (known after apply)
      + public_dns        = (known after apply)
      + public_ip         = (known after apply)
      + public_ipv4_pool  = (known after apply)
      + tags              = {
          + "Name" = "sandbox_nat_eip"
        }
      + vpc               = true
    }

  # module.sandbox_vpc.aws_eip.nat_eip[2] will be created
  + resource "aws_eip" "nat_eip" {
      + allocation_id     = (known after apply)
      + association_id    = (known after apply)
      + customer_owned_ip = (known after apply)
      + domain            = (known after apply)
      + id                = (known after apply)
      + instance          = (known after apply)
      + network_interface = (known after apply)
      + private_dns       = (known after apply)
      + private_ip        = (known after apply)
      + public_dns        = (known after apply)
      + public_ip         = (known after apply)
      + public_ipv4_pool  = (known after apply)
      + tags              = {
          + "Name" = "sandbox_nat_eip"
        }
      + vpc               = true
    }

  # module.sandbox_vpc.aws_internet_gateway.internet_gw will be created
  + resource "aws_internet_gateway" "internet_gw" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name" = "sandbox_internet_gw"
        }
      + vpc_id   = (known after apply)
    }

  # module.sandbox_vpc.aws_nat_gateway.nat_gw[0] will be created
  + resource "aws_nat_gateway" "nat_gw" {
      + allocation_id        = (known after apply)
      + id                   = (known after apply)
      + network_interface_id = (known after apply)
      + private_ip           = (known after apply)
      + public_ip            = (known after apply)
      + subnet_id            = (known after apply)
      + tags                 = {
          + "Name" = "sandbox_nat_gw"
        }
    }

  # module.sandbox_vpc.aws_nat_gateway.nat_gw[1] will be created
  + resource "aws_nat_gateway" "nat_gw" {
      + allocation_id        = (known after apply)
      + id                   = (known after apply)
      + network_interface_id = (known after apply)
      + private_ip           = (known after apply)
      + public_ip            = (known after apply)
      + subnet_id            = (known after apply)
      + tags                 = {
          + "Name" = "sandbox_nat_gw"
        }
    }

  # module.sandbox_vpc.aws_nat_gateway.nat_gw[2] will be created
  + resource "aws_nat_gateway" "nat_gw" {
      + allocation_id        = (known after apply)
      + id                   = (known after apply)
      + network_interface_id = (known after apply)
      + private_ip           = (known after apply)
      + public_ip            = (known after apply)
      + subnet_id            = (known after apply)
      + tags                 = {
          + "Name" = "sandbox_nat_gw"
        }
    }

  # module.sandbox_vpc.aws_route_table.lambda_function_rt[0] will be created
  + resource "aws_route_table" "lambda_function_rt" {
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                = "0.0.0.0/0"
              + egress_only_gateway_id    = ""
              + gateway_id                = ""
              + instance_id               = ""
              + ipv6_cidr_block           = ""
              + nat_gateway_id            = (known after apply)
              + network_interface_id      = ""
              + transit_gateway_id        = ""
              + vpc_peering_connection_id = ""
            },
        ]
      + tags             = {
          + "Name" = "sandbox_lambda_function_rt_a"
        }
      + vpc_id           = (known after apply)
    }

  # module.sandbox_vpc.aws_route_table.lambda_function_rt[1] will be created
  + resource "aws_route_table" "lambda_function_rt" {
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                = "0.0.0.0/0"
              + egress_only_gateway_id    = ""
              + gateway_id                = ""
              + instance_id               = ""
              + ipv6_cidr_block           = ""
              + nat_gateway_id            = (known after apply)
              + network_interface_id      = ""
              + transit_gateway_id        = ""
              + vpc_peering_connection_id = ""
            },
        ]
      + tags             = {
          + "Name" = "sandbox_lambda_function_rt_b"
        }
      + vpc_id           = (known after apply)
    }

  # module.sandbox_vpc.aws_route_table.lambda_function_rt[2] will be created
  + resource "aws_route_table" "lambda_function_rt" {
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                = "0.0.0.0/0"
              + egress_only_gateway_id    = ""
              + gateway_id                = ""
              + instance_id               = ""
              + ipv6_cidr_block           = ""
              + nat_gateway_id            = (known after apply)
              + network_interface_id      = ""
              + transit_gateway_id        = ""
              + vpc_peering_connection_id = ""
            },
        ]
      + tags             = {
          + "Name" = "sandbox_lambda_function_rt_c"
        }
      + vpc_id           = (known after apply)
    }

  # module.sandbox_vpc.aws_route_table.public_rt will be created
  + resource "aws_route_table" "public_rt" {
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                = "0.0.0.0/0"
              + egress_only_gateway_id    = ""
              + gateway_id                = (known after apply)
              + instance_id               = ""
              + ipv6_cidr_block           = ""
              + nat_gateway_id            = ""
              + network_interface_id      = ""
              + transit_gateway_id        = ""
              + vpc_peering_connection_id = ""
            },
        ]
      + tags             = {
          + "Name" = "sandbox_public_rt"
        }
      + vpc_id           = (known after apply)
    }

  # module.sandbox_vpc.aws_route_table_association.private_rta[0] will be created
  + resource "aws_route_table_association" "private_rta" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.sandbox_vpc.aws_route_table_association.private_rta[1] will be created
  + resource "aws_route_table_association" "private_rta" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.sandbox_vpc.aws_route_table_association.private_rta[2] will be created
  + resource "aws_route_table_association" "private_rta" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.sandbox_vpc.aws_route_table_association.public_rta[0] will be created
  + resource "aws_route_table_association" "public_rta" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.sandbox_vpc.aws_route_table_association.public_rta[1] will be created
  + resource "aws_route_table_association" "public_rta" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.sandbox_vpc.aws_route_table_association.public_rta[2] will be created
  + resource "aws_route_table_association" "public_rta" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.sandbox_vpc.aws_subnet.private_subnets[0] will be created
  + resource "aws_subnet" "private_subnets" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "us-east-1a"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "172.33.100.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = true
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name" = "sandbox_private_subnet_a"
        }
      + vpc_id                          = (known after apply)
    }

  # module.sandbox_vpc.aws_subnet.private_subnets[1] will be created
  + resource "aws_subnet" "private_subnets" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "us-east-1b"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "172.33.110.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = true
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name" = "sandbox_private_subnet_b"
        }
      + vpc_id                          = (known after apply)
    }

  # module.sandbox_vpc.aws_subnet.private_subnets[2] will be created
  + resource "aws_subnet" "private_subnets" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "us-east-1c"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "172.33.120.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = true
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name" = "sandbox_private_subnet_c"
        }
      + vpc_id                          = (known after apply)
    }

  # module.sandbox_vpc.aws_subnet.public_subnets[0] will be created
  + resource "aws_subnet" "public_subnets" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "us-east-1a"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "172.33.10.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = true
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name" = "sandbox_public_subnet_a"
        }
      + vpc_id                          = (known after apply)
    }

  # module.sandbox_vpc.aws_subnet.public_subnets[1] will be created
  + resource "aws_subnet" "public_subnets" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "us-east-1b"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "172.33.20.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = true
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name" = "sandbox_public_subnet_b"
        }
      + vpc_id                          = (known after apply)
    }

  # module.sandbox_vpc.aws_subnet.public_subnets[2] will be created
  + resource "aws_subnet" "public_subnets" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "us-east-1c"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "172.33.30.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = true
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name" = "sandbox_public_subnet_c"
        }
      + vpc_id                          = (known after apply)
    }

  # module.sandbox_vpc.aws_vpc.application_vpc will be created
  + resource "aws_vpc" "application_vpc" {
      + arn                              = (known after apply)
      + assign_generated_ipv6_cidr_block = false
      + cidr_block                       = "172.33.0.0/16"
      + default_network_acl_id           = (known after apply)
      + default_route_table_id           = (known after apply)
      + default_security_group_id        = (known after apply)
      + dhcp_options_id                  = (known after apply)
      + enable_classiclink               = false
      + enable_classiclink_dns_support   = (known after apply)
      + enable_dns_hostnames             = true
      + enable_dns_support               = true
      + id                               = (known after apply)
      + instance_tenancy                 = "default"
      + ipv6_association_id              = (known after apply)
      + ipv6_cidr_block                  = (known after apply)
      + main_route_table_id              = (known after apply)
      + owner_id                         = (known after apply)
      + tags                             = {
          + "Name" = "sandbox_application_vpc"
        }
    }

Plan: 24 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + vpc_id = (known after apply)
╷
│ Warning: Version constraints inside provider configuration blocks are deprecated
│
│   on provider.tf line 19, in provider "aws":
│   19:   version             = "~> 2.46"
│
│ Terraform 0.13 and earlier allowed provider version constraints inside the provider configuration block,
│ but that is now deprecated and will be removed in a future version of Terraform. To silence this warning,
│ move the provider version constraint into the required_providers block.
╵

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

module.sandbox_vpc.aws_vpc.application_vpc: Creating...
module.sandbox_vpc.aws_vpc.application_vpc: Creation complete after 4s [id=vpc-027d204cea4860948]
module.sandbox_vpc.aws_internet_gateway.internet_gw: Creating...
module.sandbox_vpc.aws_subnet.private_subnets[0]: Creating...
module.sandbox_vpc.aws_subnet.private_subnets[2]: Creating...
module.sandbox_vpc.aws_subnet.public_subnets[2]: Creating...
module.sandbox_vpc.aws_subnet.public_subnets[1]: Creating...
module.sandbox_vpc.aws_subnet.private_subnets[1]: Creating...
module.sandbox_vpc.aws_subnet.public_subnets[0]: Creating...
module.sandbox_vpc.aws_internet_gateway.internet_gw: Creation complete after 2s [id=igw-0e384f2c3ce1926f5]
module.sandbox_vpc.aws_route_table.public_rt: Creating...
module.sandbox_vpc.aws_subnet.public_subnets[0]: Creation complete after 2s [id=subnet-027fb395e18f5e7a7]
module.sandbox_vpc.aws_subnet.public_subnets[2]: Creation complete after 2s [id=subnet-0f6c03e3374bbc0c9]
module.sandbox_vpc.aws_subnet.public_subnets[1]: Creation complete after 2s [id=subnet-08a1b225eac057faa]
module.sandbox_vpc.aws_eip.nat_eip[1]: Creating...
module.sandbox_vpc.aws_eip.nat_eip[0]: Creating...
module.sandbox_vpc.aws_eip.nat_eip[2]: Creating...
module.sandbox_vpc.aws_subnet.private_subnets[2]: Creation complete after 2s [id=subnet-021a409e4a34f8502]
module.sandbox_vpc.aws_subnet.private_subnets[0]: Creation complete after 2s [id=subnet-06cd2c4810050d3b3]
module.sandbox_vpc.aws_subnet.private_subnets[1]: Creation complete after 2s [id=subnet-0a04dbe223c4aabab]
module.sandbox_vpc.aws_eip.nat_eip[2]: Creation complete after 2s [id=eipalloc-0af2a050cca742780]
module.sandbox_vpc.aws_eip.nat_eip[1]: Creation complete after 2s [id=eipalloc-077d094eccaae52cf]
module.sandbox_vpc.aws_eip.nat_eip[0]: Creation complete after 2s [id=eipalloc-00c1d5c206f90271c]
module.sandbox_vpc.aws_nat_gateway.nat_gw[1]: Creating...
module.sandbox_vpc.aws_nat_gateway.nat_gw[0]: Creating...
module.sandbox_vpc.aws_nat_gateway.nat_gw[2]: Creating...
module.sandbox_vpc.aws_route_table.public_rt: Creation complete after 2s [id=rtb-0380f64d5b4e09169]
module.sandbox_vpc.aws_route_table_association.public_rta[2]: Creating...
module.sandbox_vpc.aws_route_table_association.public_rta[1]: Creating...
module.sandbox_vpc.aws_route_table_association.public_rta[0]: Creating...
module.sandbox_vpc.aws_route_table_association.public_rta[0]: Creation complete after 0s [id=rtbassoc-0cc9db8
303609af41]
module.sandbox_vpc.aws_route_table_association.public_rta[2]: Creation complete after 0s [id=rtbassoc-0959113
310229fc98]
module.sandbox_vpc.aws_route_table_association.public_rta[1]: Creation complete after 0s [id=rtbassoc-0fb6fc0ad3ff10709]
module.sandbox_vpc.aws_nat_gateway.nat_gw[0]: Still creating... [10s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[2]: Still creating... [10s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[1]: Still creating... [10s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[2]: Still creating... [20s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[1]: Still creating... [20s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[0]: Still creating... [20s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[0]: Still creating... [30s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[2]: Still creating... [30s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[1]: Still creating... [30s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[1]: Still creating... [40s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[2]: Still creating... [40s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[0]: Still creating... [40s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[0]: Still creating... [50s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[1]: Still creating... [50s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[2]: Still creating... [50s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[2]: Still creating... [1m0s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[0]: Still creating... [1m0s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[1]: Still creating... [1m0s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[2]: Still creating... [1m10s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[0]: Still creating... [1m10s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[1]: Still creating... [1m10s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[1]: Still creating... [1m20s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[0]: Still creating... [1m20s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[2]: Still creating... [1m20s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[0]: Still creating... [1m30s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[2]: Still creating... [1m30s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[1]: Still creating... [1m30s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[0]: Creation complete after 1m38s [id=nat-0f3a1a785e588f1ad]
module.sandbox_vpc.aws_nat_gateway.nat_gw[2]: Creation complete after 1m38s [id=nat-08d86d526694c542f]
module.sandbox_vpc.aws_nat_gateway.nat_gw[1]: Still creating... [1m40s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[1]: Creation complete after 1m48s [id=nat-036133015f4270ac2]
module.sandbox_vpc.aws_route_table.lambda_function_rt[0]: Creating...
module.sandbox_vpc.aws_route_table.lambda_function_rt[1]: Creating...
module.sandbox_vpc.aws_route_table.lambda_function_rt[2]: Creating...
module.sandbox_vpc.aws_route_table.lambda_function_rt[2]: Creation complete after 2s [id=rtb-09cc3d8010ed013e1]
module.sandbox_vpc.aws_route_table.lambda_function_rt[0]: Creation complete after 2s [id=rtb-091f510849419df19]
module.sandbox_vpc.aws_route_table.lambda_function_rt[1]: Creation complete after 2s [id=rtb-0682336657f1a6dee]
module.sandbox_vpc.aws_route_table_association.private_rta[1]: Creating...
module.sandbox_vpc.aws_route_table_association.private_rta[0]: Creating...
module.sandbox_vpc.aws_route_table_association.private_rta[2]: Creating...
module.sandbox_vpc.aws_route_table_association.private_rta[0]: Creation complete after 1s [id=rtbassoc-0f644841741e20d0a]
module.sandbox_vpc.aws_route_table_association.private_rta[2]: Creation complete after 1s [id=rtbassoc-0850610cc4c910c21]
module.sandbox_vpc.aws_route_table_association.private_rta[1]: Creation complete after 1s [id=rtbassoc-083265f1fcb467ef8]

Apply complete! Resources: 24 added, 0 changed, 0 destroyed.

Outputs:

vpc_id = "vpc-027d204cea4860948"
